/*****************************************************************************
* Model: cdb_usb.qm
* File:  ./usbsie_p24f.h
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${.::usbsie_p24f.h} ......................................................*/
#ifndef usbsie_p24f_h
#define usbsie_p24f_h

//******************************************************************************/
// USB Peripheral Constants
//******************************************************************************/

// USB Control Register Constants

// U1PWRC

#define bmSUSP_MODE           0x02    // U1PWRC - Put the module in suspend mode.
#define bmNORMAL_OPERATION    0x00    // U1PWRC - Normal USB operation
#define bmENABLE              0x01    // U1PWRC - Enable the USB module.
#define bmDISABLE             0x00    // U1PWRC - Disable the USB module.

// U1OTGCON

#define bmDP_PULLUP    0x80    // U1OTGCON - Enable D+ pull-up
#define bmDM_PULLUP    0x40    // U1OTGCON - Enable D- pull-up
#define bmDP_PULLDOWN  0x20    // U1OTGCON - Enable D+ pull-down
#define bmDM_PULLDOWN  0x10    // U1OTGCON - Enable D- pull-down
#define bmVBUS_ON             0x08    // U1OTGCON - Enable Vbus
#define bmOTG_ENABLE          0x04    // U1OTGCON - Enable OTG
#define bmVBUS_CHARGE_ENABLE  0x02    // U1OTGCON - Vbus charge line set to 5V
#define bmVBUS_DISCH_ENABLE   0x01    // U1OTGCON - Discharge Vbus

// U1OTGIE/U1OTGIR

#define bmINT_IDIF            0x80    // U1OTGIR - ID state change flag
#define bmINT_T1MSECIF        0x40    // U1OTGIR - 1ms timer interrupt flag
#define bmINT_LSTATEIF        0x20    // U1OTGIR - line state stable flag
#define bmINT_ACTIVIF         0x10    // U1OTGIR - bus activity flag
#define bmINT_SESVDIF         0x08    // U1OTGIR - session valid change flag
#define bmINT_SESENDIF        0x04    // U1OTGIR - B-device Vbus change flag
#define bmINT_VBUSVDIF        0x01    // U1OTGIR - A-device Vbus change flag

// U1CON

#define bmJSTATE_DETECTED     0x80    // U1CON - J state
#define bmSE0_DETECTED        0x40    // U1CON - Single ended 0 detected
#define bmTOKEN_BUSY          0x20    // U1CON - Token currently being processed
#define bmASSERT_RESET        0x10    // U1CON - RESET signalling
#define bmHOST                0x08    // U1CON - Enable host mode
#define bmRESUME_ACTIVATED    0x04    // U1CON - RESUME signalling
#define bmPPONG_RESET         0x02    // U1CON - Reset ping-pong buffer pointer
#define bmSOF_ENABLE          0x01    // U1CON - Enable SOF generation
#define bmSOF_DISABLE         0x00    // U1CON - Disable SOF generation

// U1CNFG1

#define bmEYE_PATTERN            0x80    // U1CFG1 - Enable eye pattern test
#define bmMONITOR_OE             0x40    // U1CFG1 - nOE signal active
#define bmFREEZE_IN_DEBUG_MODE   0x20    // U1CFG1 - Freeze on halt when in debug mode
#define bmSTOP_IN_IDLE_MODE      0x10    // U1CFG1 - Stop module in idle mode
#define bmPPONG_ALL_BUT_EP0      0x03    // U1CFG1 - Ping-pong on all endpoints except EP0
#define bmPPONG_FULL_PPONG       0x02    // U1CFG1 - Ping-pong on all endpoints
#define bmPPONG_EP0_OUT_ONLY     0x01    // U1CFG1 - Ping-pong on EP 0 out only
#define bmPPONG_NO_PPONG         0x00    // U1CFG1 - No ping-pong

// U1CNFG2

#define bmVBUS_PULLUP_ENABLE              0x01    // U1CNFG2 - Enable Vbus pull-up
#define bmEXTERNAL_IIC                    0x08    // U1CNFG2 - External module controlled by I2C
#define bmVBUS_BOOST_DISABLE              0x04    // U1CNFG2 - Disable Vbus boost
#define bmVBUS_BOOST_ENABLE               0x00    // U1CNFG2 - Enable Vbus boost
#define bmVBUS_COMPARE_DISABLE            0x02    // U1CNFG2 - Vbus comparator disabled
#define bmVBUS_COMPARE_ENABLE             0x00    // U1CNFG2 - Vbus comparator enabled
#define bmONCHIP_DISABLE                  0x01    // U1CNFG2 - On-chip transceiver disabled
#define bmXCVR_ENABLE                     0x00    // U1CNFG2 - On-chip transceiver enabled

// U1IE/U1IR

#define bmINT_STALL                     0x80    // U1IE - Stall interrupt enable
#define bmINT_ATTACH                    0x40    // U1IE - Attach interrupt enable
#define bmINT_RESUME                    0x20    // U1IE - Resume interrupt enable
#define bmINT_IDLE                      0x10    // U1IE - Idle interrupt enable
#define bmINT_XFERDONE                  0x08    // U1IE - Transfer Done interrupt enable
#define bmINT_SOF                       0x04    // U1IE - Start of Frame Threshold interrupt enable
#define bmINT_ERROR                     0x02    // U1IE - USB Error interrupt enable
#define bmINT_DETACH                    0x01    // U1IE - Detach interrupt enable

// U1EIR/U1EIR

#define bmINT_BITSTUFF                  0x80    // U1EIE - Bit Stuff Error Interrupt Enable
#define bmINT_DMA                       0x20    // U1EIE - DMA Error Interrupt Enable
#define bmINT_BUS_TA                    0x10    // U1EIE - Bus Turnaround Time-out Error Interrupt Enable
#define bmINT_DATAFIELD_SZ              0x08    // U1EIE - Data Field Size Error Interrupt Enable
#define bmINT_CRC16                     0x04    // U1EIE - CRC16 Failure Interrupt Enable
#define bmINT_EOF                       0x02    // U1EIE - End-of-Frame Error Interrupt Enable
#define bmINT_PIDCHECK                  0x01    // U1EIE - PID Check Failure Interrupt Enable

//Misc

#define DATA0                           0       // DTS bit - DATA0 PID
#define DATA1                           1       // DTS bit - DATA1 PID
#define DIR_IN    0
#define DIR_OUT   1

//UEP
#define UEP_DIRECT_LOW_SPEED                0x80    // UEP0 - Direct connect to low speed device enabled
#define UEP_NO_DIRECT_LOW_SPEED             0x00    // UEP0 - Direct connect to low speed device disabled
#define UEP_RETRY_NAKS                      0x40    // UEP0 - No automatic retry of NAK'd transactions
#define UEP_NO_RETRY_NAKS                   0x00    // UEP0 - Automatic retry of NAK'd transactions
#define UEP_NO_SETUP_TRANSFERS              0x10    // UEP0 - SETUP transfers not allowed
#define UEP_ALLOW_SETUP_TRANSFERS           0x00    // UEP0 - SETUP transfers allowed
#define UEP_RX_ENABLE                       0x08    // UEP0 - Endpoint can receive data
#define UEP_RX_DISABLE                      0x00    // UEP0 - Endpoint cannot receive data
#define UEP_TX_ENABLE                       0x04    // UEP0 - Endpoint can transmit data
#define UEP_TX_DISABLE                      0x00    // UEP0 - Endpoint cannot transmit data
#define UEP_HANDSHAKE_ENABLE                0x01    // UEP0 - Endpoint handshake enabled
#define UEP_HANDSHAKE_DISABLE               0x00    // UEP0 - Endpoint handshake disabled (isochronous endpoints)

#define USB_EP_CTRL_BULK           (UEP_NO_SETUP_TRANSFERS | UEP_RX_ENABLE | UEP_TX_ENABLE | UEP_HANDSHAKE_ENABLE) //
#define USB_EP_CTRL_ISO    (UEP_NO_SETUP_TRANSFERS | UEP_RX_ENABLE | UEP_TX_ENABLE )                       //
#define USB_EP_CTRL_INT      (UEP_NO_SETUP_TRANSFERS | UEP_RX_ENABLE | UEP_TX_ENABLE | UEP_HANDSHAKE_ENABLE) //
#define USB_EP_CTRL_SETUP          (UEP_RX_ENABLE | UEP_TX_ENABLE | UEP_HANDSHAKE_ENABLE)                          //

#define USB_EP_DISABLE                0x00    // Value to disable an endpoint.

// Buffer Descriptor Status Register layout.
typedef union _BD_STATUS {
    struct{
        unsigned            :2;     //Byte count
        unsigned    BSTALL  :1;     //Buffer Stall Enable
        unsigned    DTSEN   :1;     //Data Toggle Synch Enable
        unsigned            :2;     //Reserved - write as 00
        unsigned    DTS     :1;     //Data Toggle Synch Value
        unsigned    UOWN    :1;     //USB Ownership
    };
    struct{
        unsigned            :2;
        unsigned    PID0    :1;
        unsigned    PID1    :1;
        unsigned    PID2    :1;
        unsigned    PID3    :1;
    };
    struct{
        unsigned            :2;
        unsigned    PID     :4;        // Packet Identifier
    };
    uint8_t            Val;
} __attribute__((packed)) BD_STATUS;    //Buffer Descriptor Status Register


// BDT Entry Layout
typedef union __BDT {
    union
    {
        struct
        {
            uint8_t CNT;
            BD_STATUS STATUS;
        };
        struct
        {
            uint16_t       count:10;   //test
            uint8_t        :6;
            uint8_t*       bufaddr; //Buffer Address
        };
    };
    uint32_t           Val;
    uint16_t           v[2];
} __attribute__((packed)) BDT_ENTRY;


#endif    //usbsie_p24f_h
